{"version":3,"sources":["../../../tmp/1l3a6u4e6/css-showcases/src/CssShowcases.ts"],"sourcesContent":["import '~/showcases/dockit-showcases.define.js';\nimport { getCssCustomProps } from './css-props';\nimport { getZIndexHtml } from './z-index-helper';\nimport { getScaleHtml } from './space-helper';\nimport { getTransitionsHtml } from './transition-helper';\nimport styles from './alerts.module.scss';\nimport '~/clipboard/dockit-clipboard.define.js';\n\nexport class CssShowcases extends HTMLElement {\n  connectedCallback() {\n    const prefix = this.getAttribute('css-props-prefix') || '';\n    const mode = this.getAttribute('mode') || '';\n\n    const names = new Set(\n      (this.getAttribute('css-props-names') || '').split(',')\n    );\n\n    const props = getCssCustomProps(prefix, names);\n\n    const styleKey = this.getAttribute('style-key');\n    const componentType = this.getAttribute('component-type') || 'box';\n\n    if (\n      prefix.includes('transition') ||\n      prefix.includes('time') ||\n      prefix.includes('ease') ||\n      prefix.includes('animation') ||\n      mode === 'time' ||\n      mode === 'ease' ||\n      mode === 'animation'\n    ) {\n      let _mode =\n        mode != ''\n          ? mode\n          : prefix.includes('time') || prefix.includes('transition')\n          ? 'time'\n          : prefix.includes('ease')\n          ? 'ease'\n          : prefix.includes('animation')\n          ? 'animation'\n          : null;\n      this.innerHTML = getTransitionsHtml(this, props, _mode);\n      if (prefix.includes('transition') && !this.hasAttribute('mode'))\n        this.innerHTML =\n          this.innerHTML +\n          /*html*/\n          `<p class=\"${styles.warn}\"><code>--transition</code> CSS Custom Props prefix is deprecated.<br>Use <code>--time</code> prefix instead, or use <code>&lt;dockit-css-showcases mode=\"time\" css-props-prefix=\"--transition\"/></code> elements to explicitely set the rendering mode.</p>`;\n      return;\n    }\n\n    if (prefix.includes('z-index') || mode === 'z-index') {\n      this.innerHTML = getZIndexHtml(props);\n      return;\n    }\n\n    if (\n      (prefix.includes('spacing') && !prefix.includes('letter-spacing')) ||\n      mode === 'scale'\n    ) {\n      this.innerHTML = getScaleHtml(props);\n      return;\n    }\n\n    const componentClass = this.getAttribute('component-class');\n    const hasLongText = this.hasAttribute('long-text');\n    const hasCheckeredBackground = this.hasAttribute('checkered-background');\n    const showcaseStyles = props\n      .map(([name]) => `${styleKey}: var(${name});`)\n      .join(' ');\n\n    this.innerHTML =\n      this.innerHTML +\n      /*html*/\n      `<dockit-showcases\n          component-class=\"${componentClass}\"\n          showcase-styles=\"${showcaseStyles}\"\n          component-type=\"${componentType}\"\n          ${hasLongText ? 'long-text' : ''}\n          ${hasCheckeredBackground ? 'checkered-background' : ''}\n      >\n      </dockit-showcases>`;\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAQO,2BAA2B,YAAY;AAAA,EAC5C,oBAAoB;AACZ,UAAA,SAAS,KAAK,aAAa,uBAAuB;AAClD,UAAA,OAAO,KAAK,aAAa,WAAW;AAE1C,UAAM,QAAQ,IAAI,UACV,aAAa,sBAAsB,IAAI,MAAM;AAG/C,UAAA,QAAQ,kBAAkB,QAAQ;AAElC,UAAA,WAAW,KAAK,aAAa;AAC7B,UAAA,gBAAgB,KAAK,aAAa,qBAAqB;AAE7D,QACE,OAAO,SAAS,iBAChB,OAAO,SAAS,WAChB,OAAO,SAAS,WAChB,OAAO,SAAS,gBAChB,SAAS,UACT,SAAS,UACT,SAAS,aACT;AACA,UAAI,QACF,QAAQ,KACJ,OACA,OAAO,SAAS,WAAW,OAAO,SAAS,gBAC3C,SACA,OAAO,SAAS,UAChB,SACA,OAAO,SAAS,eAChB,cACA;AACD,WAAA,YAAY,mBAAmB,MAAM,OAAO;AACjD,UAAI,OAAO,SAAS,iBAAiB,CAAC,KAAK,aAAa;AACtD,aAAK,YACH,KAAK,YAEL,aAAa,OAAO;AACxB;AAAA;AAGF,QAAI,OAAO,SAAS,cAAc,SAAS,WAAW;AACpD,WAAK,YAAY,cAAc;AAC/B;AAAA;AAIC,QAAA,OAAO,SAAS,cAAc,CAAC,OAAO,SAAS,qBAChD,SAAS,SACT;AACA,WAAK,YAAY,aAAa;AAC9B;AAAA;AAGI,UAAA,iBAAiB,KAAK,aAAa;AACnC,UAAA,cAAc,KAAK,aAAa;AAChC,UAAA,yBAAyB,KAAK,aAAa;AAC3C,UAAA,iBAAiB,MACpB,IAAI,CAAC,CAAC,UAAU,GAAG,iBAAiB,UACpC,KAAK;AAEH,SAAA,YACH,KAAK,YAEL;AAAA,6BACuB;AAAA,6BACA;AAAA,4BACD;AAAA,YAChB,cAAc,cAAc;AAAA,YAC5B,yBAAyB,yBAAyB;AAAA;AAAA;AAAA;AAAA;;","sourceRoot":"/source_map/"}