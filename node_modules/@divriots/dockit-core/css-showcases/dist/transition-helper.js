const boxLabel = "_boxLabel_1gsk9_1";
const boxLabelSmall = "_boxLabelSmall_1gsk9_8";
const boxesContainer = "_boxesContainer_1gsk9_12";
const box = "_box_1gsk9_1";
var styles = {
  boxLabel,
  boxLabelSmall,
  boxesContainer,
  box
};
const getTransitionsHtml = (element, props, mode) => {
  const style = (name) => {
    if (mode === "animation") {
      return `animation: var(${name}) forwards`;
    } else {
      return `
        transition-delay: 0;
        transition-duration: ${mode === "time" ? `var(${name})` : "1s"};
        transition-property: margin-left';
        transition-timing-function: ${mode === "ease" ? `var(${name})` : "linear"};`;
    }
  };
  setTimeout(() => {
    const boxes = element.querySelectorAll(".transitionBox");
    const toggle = mode === "animation" ? "no-anim" : "clicked";
    boxes.forEach((box2) => box2.addEventListener("click", () => {
      if (box2.className.includes(toggle))
        box2.className = box2.className.replace(` ${toggle}`, "");
      else
        box2.className = `${box2.className} ${toggle}`;
    }));
  }, 300);
  const getAnimationMode = () => mode === "animation" ? "no-anim" : "";
  const boxWidth = "12rem";
  return `
    <div class="${styles.boxesContainer}">
      <style>
        .clicked { margin-left: calc(100% - ${boxWidth}); }
        .no-anim { animation: none !important; }
      </style>
      ${props.map(([name, value], i) => `
          <div id="transitionBox${i}"
              class="${styles.box} ${getAnimationMode()} transitionBox"
              style="width: ${boxWidth}; ${style(name)}"
          >
            <div class="${styles.boxLabel}">${name}</div>
            <div class="${styles.boxLabel} ${styles.boxLabelSmall}">${value}</div>
          </div>`).join("\n")}
    </div>`;
};
export { getTransitionsHtml };
