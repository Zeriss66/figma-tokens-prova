import { LitElement, html, nothing } from "lit";
import { property, state } from "lit/decorators.js";
import { ifDefined } from "lit/directives/if-defined.js";
import { unsafeHTML } from "lit/directives/unsafe-html.js";
import { LayoutStyles } from "./Layout.styles.js";
import "./breakpoints.js";
var menuSvg = '<!-- "menu" from https://feathericons.com -->\n<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-menu"><line x1="3" y1="12" x2="21" y2="12"></line><line x1="3" y1="6" x2="21" y2="6"></line><line x1="3" y1="18" x2="21" y2="18"></line></svg>';
var moonSvg = '<!-- "moon" from https://feathericons.com -->\n<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-moon"><path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path></svg>';
var sunSvg = '<!-- "sun" from https://feathericons.com -->\n<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-sun"><circle cx="12" cy="12" r="5"></circle><line x1="12" y1="1" x2="12" y2="3"></line><line x1="12" y1="21" x2="12" y2="23"></line><line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line><line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line><line x1="1" y1="12" x2="3" y2="12"></line><line x1="21" y1="12" x2="23" y2="12"></line><line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line><line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line></svg>';
var xSvg = '<!-- "x" from https://feathericons.com -->\n<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-x"><line x1="18" y1="6" x2="6" y2="18"></line><line x1="6" y1="6" x2="18" y2="18"></line></svg>';
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i = decorators.length - 1, decorator; i >= 0; i--)
    if (decorator = decorators[i])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result)
    __defProp(target, key, result);
  return result;
};
const getInitialColorScheme = () => {
  return localStorage.getItem("colorScheme") || window.matchMedia("(prefers-color-scheme: dark)").matches && "dark" || "light";
};
class Layout extends LitElement {
  constructor() {
    super(...arguments);
    this.disableColorSchemeChange = false;
    this.isNavigationShown = false;
    this.locationPathname = location.pathname;
    this.listenerRemovers = [];
  }
  connectedCallback() {
    super.connectedCallback();
    this.colorScheme = this.initialColorScheme || getInitialColorScheme();
    this.dispatchColorSchemeChange();
    this.setupWindowEvents();
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.teardownWindowEvents();
  }
  requestUpdate(...args) {
    super.requestUpdate(...args);
    const name = args[0];
    if (name === "context") {
      this.locationPathname = location.pathname;
    }
  }
  render() {
    this.renderHost();
    return html`
      <div class="root">
        <div class="fixed-container">
          <div class="relative-container">
            <header class="header">
              <div class="logo-container">
                ${this.hasNavigation ? html`<a class="logo-link" href="${this.getLogoHref()}">
                      <slot name="logo"></slot>
                    </a>` : html`<slot name="logo"></slot>`}
              </div>
              <div class="topbar-container">
                <slot name="topbar"></slot>
              </div>
              <div class="buttons-container">
                ${this.disableColorSchemeChange ? nothing : html`
                      <button
                        class="color-scheme-toggle"
                        aria-live="polite"
                        aria-label="${`Press to activate ${this.colorScheme === "dark" ? "light" : "dark"} mode`}"
                        @click="${() => this.toggleColorScheme()}"
                      >
                        ${unsafeHTML(this.colorScheme === "dark" ? moonSvg : sunSvg)}
                      </button>
                    `}
                ${this.hasNavigation ? html`
                      <button
                        class="navigation-toggle"
                        aria-live="polite"
                        aria-label="${`Press to ${this.isNavigationShown ? "close" : "open"} navigation`}"
                        @click="${() => this.toggleNavigation()}"
                      >
                        ${unsafeHTML(this.isNavigationShown ? xSvg : menuSvg)}
                      </button>
                    ` : nothing}
              </div>
            </header>
            ${this.hasNavigation ? html`<div
                  class="navigation-wrapper"
                  @click="${(event) => this.onNavigationWrapperClick(event)}"
                >
                  <nav class="navigation">
                    <ul>
                      ${this.context.pagesGraph.filter((group) => !group.children || group.children.length > 0).map((group) => html`<li>
                            ${group.children ? html`<span>${group.key}</span>` : nothing}
                            <ul>
                              ${(group.children ? group.children : [group]).map((item) => html`<li>
                                  <a
                                    href="${this.getPageUrlWithoutOrigin(item.page)}"
                                    aria-current="${ifDefined(this.locationPathname === this.getPageUrlWithoutOrigin(item.page) ? "location" : void 0)}"
                                  >
                                    ${item.key}
                                  </a>
                                </li>`)}
                            </ul>
                          </li>`)}
                    </ul>
                  </nav>
                </div>` : nothing}
          </div>
        </div>
        <main class="main-container">
          <article class="content">
            <slot></slot>
          </article>
        </main>
      </div>
    `;
  }
  renderHost() {
    if (this.hasNavigation) {
      this.setAttribute("data-has-navigation", "");
    } else {
      this.removeAttribute("data-has-navigation");
    }
    if (this.isNavigationShown) {
      this.setAttribute("data-is-navigation-shown", "");
    } else {
      this.removeAttribute("data-is-navigation-shown");
    }
    this.setAttribute("data-color-scheme", this.colorScheme);
  }
  dispatchColorSchemeChange() {
    this.dispatchEvent(new CustomEvent("color-scheme-change", {
      detail: { colorScheme: this.colorScheme }
    }));
  }
  setupWindowEvents() {
    const windowKeydownListener = (event) => this.onWindowKeydown(event);
    window.addEventListener("keydown", windowKeydownListener);
    this.listenerRemovers.push(() => {
      window.removeEventListener("keydown", windowKeydownListener);
    });
  }
  teardownWindowEvents() {
    this.listenerRemovers.forEach((removeListener) => removeListener());
    this.listenerRemovers = [];
  }
  getLogoHref() {
    var _a, _b;
    let page = "";
    if (this.hasNavigation && ((_a = this.context.pagesGraph) == null ? void 0 : _a.length) > 0) {
      const pageGraph = this.context.pagesGraph[0];
      page = pageGraph.page || (((_b = pageGraph.children) == null ? void 0 : _b.length) > 0 ? pageGraph.children[0].page : "");
    }
    return page ? this.getPageUrlWithoutOrigin(page) : "";
  }
  get hasNavigation() {
    return !!(this.context && this.context.pagesGraph);
  }
  getPageUrlWithoutOrigin(page) {
    return this.context.base + page.url;
  }
  toggleColorScheme() {
    this.colorScheme = this.colorScheme === "dark" ? "light" : "dark";
    this.dispatchColorSchemeChange();
    localStorage.setItem("colorScheme", this.colorScheme);
  }
  toggleNavigation() {
    this.isNavigationShown = !this.isNavigationShown;
  }
  onWindowKeydown(event) {
    if (this.isNavigationShown && event.key === "Escape") {
      this.hideNavigation();
    }
  }
  onNavigationWrapperClick(event) {
    if (event.target === event.currentTarget || event.target.tagName === "A") {
      this.hideNavigation();
    }
  }
  hideNavigation() {
    this.isNavigationShown = false;
  }
}
Layout.styles = LayoutStyles;
__decorateClass([
  property({ attribute: false })
], Layout.prototype, "context", 2);
__decorateClass([
  property({ type: Boolean, attribute: "disable-color-scheme-change" })
], Layout.prototype, "disableColorSchemeChange", 2);
__decorateClass([
  property({ attribute: "initial-color-scheme" })
], Layout.prototype, "initialColorScheme", 2);
__decorateClass([
  state()
], Layout.prototype, "isNavigationShown", 2);
__decorateClass([
  state()
], Layout.prototype, "colorScheme", 2);
__decorateClass([
  state()
], Layout.prototype, "locationPathname", 2);
export { Layout };
