var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
import MiniSearch from "minisearch";
const miniSearch = new MiniSearch({
  fields: ["title", "headline", "body", "section"],
  storeFields: ["title", "headline", "body", "section"],
  searchOptions: {
    boost: { headline: 4, title: 3, section: 2 },
    fuzzy: 0.2,
    prefix: true
  }
});
const docBlocks = new Map();
function indexDoc(content, { url, input: file, title, section, base }) {
  if (docBlocks.has(file))
    miniSearch.removeAll(docBlocks.get(file));
  let heading;
  const headingRE = /^\n?(#*)\s+(.*)\n\n([^#]*)/gm;
  const blocks = [];
  while (heading = headingRE.exec(content)) {
    const [, level, headline, body] = heading;
    let id = base + url;
    if (level.length > 1)
      id += `#${headline.toLowerCase()}`;
    blocks.push({ id, title, section, headline, body });
  }
  docBlocks.set(file, blocks);
  miniSearch.addAll(blocks);
}
const search = async (searchValue, { pages, base }) => {
  if (docBlocks.size === 0)
    for (const _a of pages) {
      const _b = _a, { data, content } = _b, rest = __objRest(_b, ["data", "content"]);
      indexDoc(content, __spreadValues(__spreadValues({ base }, data), rest));
    }
  return miniSearch.search(searchValue);
};
export { search };
