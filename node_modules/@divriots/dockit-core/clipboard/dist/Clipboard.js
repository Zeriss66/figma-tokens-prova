import copyTextToClipboard from "copy-to-clipboard";
var clipboardStyles = ".wrapper {\n  font-size: 0.8rem;\n  position: relative;\n  display: inline-block;\n  width: auto;\n  cursor: pointer;\n}\n\n.tooltip {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  bottom: 1.15rem;\n  font-size: 0.8rem;\n  border-radius: 0.3rem;\n  background-color: rgb(45, 55, 72);\n  color: rgb(255, 255, 255);\n  padding: 0rem 0.3rem;\n  transition: height 200ms ease-out 0s, opacity 200ms ease-in 0s;\n  height: 0rem;\n  overflow: hidden;\n  opacity: 0;\n  cursor: pointer;\n}\n\n::slotted(*) {\n  margin: 0 0;\n}\n\n.slotContainer:hover {\n  opacity: 0.7;\n}\n\n.wrapper:hover .tooltip {\n  height: 1.4rem;\n  opacity: 1;\n}\n";
class Clipboard extends HTMLElement {
  constructor() {
    super();
    this.attachShadow({ mode: "open" });
  }
  copy() {
    var _a;
    const text = (_a = this.shadowRoot.querySelector("slot").assignedNodes()[0]) == null ? void 0 : _a.textContent;
    copyTextToClipboard(text);
    const tooltip = this.shadowRoot.querySelector(`.tooltip`);
    tooltip.textContent = "Copied";
    setTimeout(() => tooltip.textContent = "Copy", 2e3);
  }
  connectedCallback() {
    this.onclick = this.copy;
    const width = this.getAttribute("width");
    const widthStyle = width ? `style="width:${width};"` : "";
    this.shadowRoot.innerHTML = `
      <style>${clipboardStyles}</style>
      <div class="wrapper" ${widthStyle}>
        <div class="slotContainer">
          <slot></slot>
        </div>
        <div class="tooltip">Copy</div>
      </div>
    `;
  }
}
export { Clipboard };
