let hasBeenSetup = false;
let opts;
let linkSelector;
const modulesCache = {};
function setupSpeedyLinks(options) {
  if (hasBeenSetup) {
    return;
  }
  hasBeenSetup = true;
  opts = options;
  linkSelector = opts.linkSelector ? opts.linkSelector : "a";
  document.body.addEventListener("click", onClick);
  window.addEventListener("popstate", onPopState);
}
async function onClick(event) {
  const link = event.composedPath().find((e) => e instanceof HTMLElement && e.matches(linkSelector));
  if (link && link.href) {
    const url = link.href;
    const hash = new URL(url).hash;
    if (isDifferentOriginUrl(url)) {
      return;
    }
    event.preventDefault();
    if (isSamePageUrl(url)) {
      if (url !== location.href) {
        pushNewUrlToHistory(url);
      }
      tryScrollToHashOrResetScroll(hash);
    } else {
      pushNewUrlToHistory(url);
      await renderPage(url);
      tryScrollToHashOrResetScroll(hash);
    }
  }
}
async function onPopState() {
  await renderPage(location.href);
}
function isDifferentOriginUrl(url) {
  return new URL(url).origin !== location.origin;
}
function isSamePageUrl(url) {
  return removeHash(url) === removeHash(location.href);
}
function pushNewUrlToHistory(url) {
  history.pushState({}, document.title, url);
}
function tryScrollToHashOrResetScroll(hash) {
  let hashEl;
  if (hash) {
    try {
      hashEl = document.querySelector(hash);
    } catch {
    }
  }
  if (hashEl) {
    hashEl.scrollIntoView();
  } else {
    window.scrollTo(0, 0);
  }
}
async function renderPage(url) {
  const urlWithoutHash = removeHash(url);
  let module = modulesCache[urlWithoutHash];
  if (!module) {
    const moduleUrl = await opts.mapLinkUrlToModuleUrl(urlWithoutHash);
    module = await import(moduleUrl);
    modulesCache[urlWithoutHash] = module;
  }
  try {
    if (opts.moduleExecutor) {
      await opts.moduleExecutor(module);
    } else {
      const render = module.default;
      await render();
    }
  } catch (e) {
    location.href = url;
  }
}
function removeHash(url) {
  return url.split("#")[0];
}
export { setupSpeedyLinks };
