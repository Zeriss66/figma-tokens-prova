{"version":3,"file":"manifest-mixin.js","sourceRoot":"","sources":["../src/manifest-mixin.ts"],"names":[],"mappings":";AAAA,OAAO,EAAc,IAAI,EAAE,MAAM,KAAK,CAAC;AACvC,OAAO,EAAE,QAAQ,EAAE,MAAM,4BAA4B,CAAC;AACtD,OAAO,EAAE,aAAa,EAAE,iBAAiB,EAAW,MAAM,eAAe,CAAC;AAiB1E,MAAM,CAAC,MAAM,gBAAgB,GAAG,IAAI,CAAA;;CAEnC,CAAC;AAEF,MAAM,CAAC,MAAM,aAAa,GAAG,CAC3B,IAAO,EACkC,EAAE;IAC3C,MAAM,aAAc,SAAQ,IAAI;QAAhC;;YAiBE,gBAAW,GAA4B,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAmB/D,CAAC;QAfC,UAAU;YACR,MAAM,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;YAErB,IAAI,IAAI,CAAC,QAAQ,EAAE;gBACjB,IAAI,iBAAiB,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;oBACpC,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;oBACzB,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;iBACnD;qBAAM;oBACL,OAAO,CAAC,KAAK,CAAC,oDAAoD,CAAC,CAAC;iBACrE;aACF;iBAAM,IAAI,GAAG,IAAI,IAAI,CAAC,OAAO,KAAK,GAAG,EAAE;gBACtC,IAAI,CAAC,OAAO,GAAG,GAAG,CAAC;gBACnB,IAAI,CAAC,WAAW,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC;aACvC;QACH,CAAC;KACF;IAnCa;QAAX,QAAQ,EAAE;8CAAc;IAGzB;QADC,QAAQ,CAAC,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;mDACZ;IASnB;QAPC,QAAQ,CAAC;YACR,OAAO,EAAE,IAAI;YACb,SAAS,EAAE;gBACT,aAAa,EAAE,CAAC,KAAa,EAAE,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC;gBAClD,WAAW,EAAE,CAAC,KAAe,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC;aAClD;SACF,CAAC;+CACc;IAEJ;QAAX,QAAQ,EAAE;mDAAmB;IAuBhC,OAAO,aAAa,CAAC;AACvB,CAAC,CAAC","sourcesContent":["import { LitElement, html } from 'lit';\nimport { property } from 'lit/decorators/property.js';\nimport { fetchManifest, hasCustomElements, Package } from './manifest.js';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport type Constructor<T = unknown> = new (...args: any[]) => T;\n\nexport interface ManifestMixinInterface {\n  src?: string;\n\n  manifest?: Package;\n\n  only?: string[];\n\n  selected?: string;\n\n  jsonFetched: Promise<Package | null>;\n}\n\nexport const emptyDataWarning = html`\n  <div part=\"warning\">No custom elements found in the JSON file.</div>\n`;\n\nexport const ManifestMixin = <T extends Constructor<LitElement>>(\n  base: T\n): T & Constructor<ManifestMixinInterface> => {\n  class ManifestClass extends base {\n    @property() src?: string;\n\n    @property({ attribute: false })\n    manifest?: Package;\n\n    @property({\n      reflect: true,\n      converter: {\n        fromAttribute: (value: string) => value.split(','),\n        toAttribute: (value: string[]) => value.join(',')\n      }\n    })\n    only?: string[];\n\n    @property() selected?: string;\n\n    jsonFetched: Promise<Package | null> = Promise.resolve(null);\n\n    private lastSrc?: string;\n\n    willUpdate(): void {\n      const { src } = this;\n\n      if (this.manifest) {\n        if (hasCustomElements(this.manifest)) {\n          this.lastSrc = undefined;\n          this.jsonFetched = Promise.resolve(this.manifest);\n        } else {\n          console.error('No custom elements found in the `manifest` object.');\n        }\n      } else if (src && this.lastSrc !== src) {\n        this.lastSrc = src;\n        this.jsonFetched = fetchManifest(src);\n      }\n    }\n  }\n\n  return ManifestClass;\n};\n"]}