import { __decorate } from "tslib";
import { html } from 'lit';
import { property } from 'lit/decorators/property.js';
import { fetchManifest, hasCustomElements } from './manifest.js';
export const emptyDataWarning = html `
  <div part="warning">No custom elements found in the JSON file.</div>
`;
export const ManifestMixin = (base) => {
    class ManifestClass extends base {
        constructor() {
            super(...arguments);
            this.jsonFetched = Promise.resolve(null);
        }
        willUpdate() {
            const { src } = this;
            if (this.manifest) {
                if (hasCustomElements(this.manifest)) {
                    this.lastSrc = undefined;
                    this.jsonFetched = Promise.resolve(this.manifest);
                }
                else {
                    console.error('No custom elements found in the `manifest` object.');
                }
            }
            else if (src && this.lastSrc !== src) {
                this.lastSrc = src;
                this.jsonFetched = fetchManifest(src);
            }
        }
    }
    __decorate([
        property()
    ], ManifestClass.prototype, "src", void 0);
    __decorate([
        property({ attribute: false })
    ], ManifestClass.prototype, "manifest", void 0);
    __decorate([
        property({
            reflect: true,
            converter: {
                fromAttribute: (value) => value.split(','),
                toAttribute: (value) => value.join(',')
            }
        })
    ], ManifestClass.prototype, "only", void 0);
    __decorate([
        property()
    ], ManifestClass.prototype, "selected", void 0);
    return ManifestClass;
};
//# sourceMappingURL=manifest-mixin.js.map