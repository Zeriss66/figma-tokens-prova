{"version":3,"file":"templates.js","sourceRoot":"","sources":["../src/templates.ts"],"names":[],"mappings":"AAAA,MAAM,SAAS,GAAiC,EAAE,CAAC;AAEnD,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,EAAU,EAAE,GAA0B,EAAE,EAAE;IACrE,SAAS,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC;AACtB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC;IACzC,IAAI,EAAE,MAAM;IACZ,IAAI,EAAE,MAAM;IACZ,IAAI,EAAE,MAAM;IACZ,MAAM,EAAE,QAAQ;IAChB,MAAM,EAAE,QAAQ;IAChB,OAAO,EAAE,SAAS;CACnB,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,IAAa,EAA+B,EAAE,CACvE,IAAI,YAAY,mBAAmB,CAAC;AAEtC,MAAM,aAAa,GACjB,CAAC,IAAY,EAAE,IAAY,EAAE,EAAE,CAAC,CAAC,GAAwB,EAAE,EAAE;IAC3D,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,GAAG,CAAC,OAAO,CAAC;IACxC,OAAO,OAAO,KAAK,IAAI,IAAI,MAAM,KAAK,IAAI,CAAC;AAC7C,CAAC,CAAC;AAEJ,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,IAAa,EAAkB,EAAE,CAC/D,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC,IAAI,CAAC;AAE3D,MAAM,CAAC,MAAM,WAAW,GAAG,CACzB,EAAU,EACV,IAAY,EACZ,IAAY,EACqB,EAAE,CACnC,SAAS,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;AAEhD,MAAM,CAAC,MAAM,YAAY,GAAG,CAC1B,EAAU,EACV,IAAY,EACZ,IAAY,EACW,EAAE,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;AAE5E,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,EAAU,EAAE,IAAY,EAAE,IAAY,EAAW,EAAE,CAC7E,SAAS,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC","sourcesContent":["const templates: Array<HTMLTemplateElement[]> = [];\n\nexport const setTemplates = (id: number, tpl: HTMLTemplateElement[]) => {\n  templates[id] = tpl;\n};\n\nexport const TemplateTypes = Object.freeze({\n  HOST: 'host',\n  KNOB: 'knob',\n  SLOT: 'slot',\n  PREFIX: 'prefix',\n  SUFFIX: 'suffix',\n  WRAPPER: 'wrapper'\n});\n\nexport const isTemplate = (node: unknown): node is HTMLTemplateElement =>\n  node instanceof HTMLTemplateElement;\n\nconst matchTemplate =\n  (name: string, type: string) => (tpl: HTMLTemplateElement) => {\n    const { element, target } = tpl.dataset;\n    return element === name && target === type;\n  };\n\nexport const getTemplateNode = (node: unknown): Element | null =>\n  isTemplate(node) ? node.content.firstElementChild : null;\n\nexport const getTemplate = (\n  id: number,\n  name: string,\n  type: string\n): HTMLTemplateElement | undefined =>\n  templates[id].find(matchTemplate(name, type));\n\nexport const getTemplates = (\n  id: number,\n  name: string,\n  type: string\n): HTMLTemplateElement[] => templates[id].filter(matchTemplate(name, type));\n\nexport const hasTemplate = (id: number, name: string, type: string): boolean =>\n  templates[id].some(matchTemplate(name, type));\n"]}